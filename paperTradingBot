import random

class PaperTradingBot:
    def __init__(self):
        self.balance = 100  # Starting balance in USD
        self.portfolio = {'USDT': 0}
        self.trade_history = []  # To store trade history for P/L calculation
        self.total_profit_loss = 0.0  # Cumulative profit/loss

    def simulate_trade(self):
        price = self.fetch_market_price()
        print(f"Market price: {price:.2f}")

        if price < 1:
            # Calculate amount to buy (80% of balance divided by price)
            amount_to_buy = (self.balance * 0.8) / price
            cost = amount_to_buy * price
            
            if cost <= self.balance:
                # Deduct cost from balance and add to portfolio
                self.balance -= cost
                self.portfolio['USDT'] += amount_to_buy
                self.trade_history.append({'action': 'buy', 'amount': amount_to_buy, 'price': price})
                print(f"Bought {amount_to_buy:.2f} USDT at {price:.2f} each. Total cost: {cost:.2f}")
            else:
                print("Insufficient balance for purchase.")
        
        elif price > 1:
            print("Market price >= 1, will not buy.")  # New message for prices greater than 1
            
            # Calculate amount to sell (80% of USDT in portfolio)
            if self.portfolio['USDT'] > 0:
                amount_to_sell = self.portfolio['USDT'] * 0.8
                
                if amount_to_sell > self.portfolio['USDT']:
                    amount_to_sell = self.portfolio['USDT']
                
                revenue = amount_to_sell * price
                # Add revenue to balance and deduct from portfolio
                self.balance += revenue
                self.portfolio['USDT'] -= amount_to_sell
                
                # Calculate total cost of the USDT being sold
                total_cost = sum(trade['amount'] * trade['price'] for trade in self.trade_history if trade['action'] == 'buy')
                
                # Calculate P/L for this trade
                total_bought = sum(trade['amount'] for trade in self.trade_history if trade['action'] == 'buy')
                average_cost_per_unit = total_cost / total_bought if total_bought > 0 else 0
                profit_loss = revenue - (average_cost_per_unit * amount_to_sell)
                
                # Update cumulative P/L
                self.total_profit_loss += profit_loss
                
                print(f"Sold {amount_to_sell:.2f} USDT at {price:.2f} each. Revenue: {revenue:.2f}. P/L: {profit_loss:.2f}")
                print(f"Cumulative P/L to date: {self.total_profit_loss:.2f}")
                
                # Remove the corresponding buy trades from history (if needed)
                for _ in range(int(amount_to_sell)):
                    for i, trade in enumerate(self.trade_history):
                        if trade['action'] == 'buy' and trade['amount'] > 0:
                            trade['amount'] -= 1
                            if trade['amount'] == 0:
                                del self.trade_history[i]
                            break
            else:
                print("Insufficient USDT in portfolio.")

    def fetch_market_price(self):
        # Simulate market price changes
        return random.uniform(0.95, 1.05)  # Example range for stablecoin prices

# Initialize the bot and simulate trading
bot = PaperTradingBot()

# Simulate trading loop
for _ in range(10):
    print("Fetching market price...")
    bot.simulate_trade()